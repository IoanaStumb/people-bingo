{"version":3,"sources":["components/BingoCard.js","logic/helpers.js","components/Emoji.js","logic/bingo-logic.js","components/BingoGame.js","components/App.js","index.js"],"names":["useStyles","makeStyles","theme","title","fontSize","bingoInput","width","BingoDefaultCard","index","question","onBlur","classes","guessedColor","isAnswered","id","Typography","className","color","gutterBottom","style","questionText","TextField","defaultValue","answer","event","target","value","BingoFreeCard","BingoComplexCard","string","answerId","reasonId","size","placeholder","charAt","toLowerCase","slice","BingoCard","questionType","Emoji","props","paddingRight","role","aria-label","label","aria-hidden","symbol","getQuestionsOrder","questions","shuffledQuestions","array","i","length","j","Math","floor","random","shuffleArray","map","shuffledQuestion","reason","checkForBingo","winType","gridSize","row","column","isBingo","layout","marginLeft","spacing","marginRight","breakpoints","up","heroContent","backgroundColor","palette","background","paper","padding","sidekickContent","bingoContent","position","bottom","left","margin","doubleBingoContent","bold","fontWeight","marginTop","marginBottom","card","height","container","display","flexWrap","spaceBetweenItems","item","flex","boxSizing","BingoGame","data","useState","setQuestions","bingoCounter","setBingoCounter","isDoubleBingo","setIsDoubleBingo","useEffect","React","localStorage","setItem","JSON","stringify","handleOnBlur","updatedQuestions","isRowBingo","isColumnBingo","CssBaseline","Container","maxWidth","component","variant","align","List","ListItem","ListItemText","disableTypography","primary","Paper","elevation","Card","CardContent","App","Helmet","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bb788f3f.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport { toLowercaseFirstLetter } from '../logic/helpers';\nimport './BingoCard.css';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontSize: 14,\n  },\n  bingoInput: {\n    width: '50%'\n  }\n}));\n\nconst BingoCard = ({ index, question, onBlur }) => {\n  return (\n    <div className=\"bingo-card\">\n      {\n        question.questionType === 'default' &&\n        <BingoDefaultCard\n          index={index}\n          question={question}\n          onBlur={onBlur} />\n      }\n      {\n        question.questionType === 'free' &&\n        <BingoFreeCard\n          question={question}\n        />\n      }\n      {\n        question.questionType === 'open-ended-question' &&\n        <BingoComplexCard\n          index={index}\n          question={question}\n          onBlur={onBlur} />\n      }\n    </div>\n  );\n}\n\nconst BingoDefaultCard = ({ index, question, onBlur }) => {\n  const classes = useStyles();\n  const guessedColor = question.isAnswered ? \"red\" : \"black\";\n  const id = \"answer-\" + index;\n\n  return (\n    <>\n      <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Find someone who...\n      </Typography>\n      <br />\n      <span style={{ color: guessedColor }}>{question.questionText}</span>\n      <br />\n      <TextField id={id} defaultValue={question.answer} onBlur={event => onBlur(index, event.target.value, null)} />\n    </>\n  )\n}\n\nconst BingoFreeCard = ({ question }) => {\n  const guessedColor = question.isAnswered ? \"red\" : \"black\";\n\n  return (\n    <Typography gutterBottom>\n      <span style={{ color: guessedColor }}>{question.questionText}</span>\n    </Typography>\n  )\n}\n\nconst BingoComplexCard = ({ index, question, onBlur }) => {\n  const classes = useStyles();\n  const guessedColor = question.isAnswered ? \"red\" : \"black\";\n  const answerId = \"answer-\" + index;\n  const reasonId = \"reason-\" + index;\n\n  return (\n    <>\n      <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n        Question time!\n      </Typography>\n      <TextField id={answerId} size=\"small\" className={classes.bingoInput} placeholder=\"who\" defaultValue={question.answer} onBlur={event => onBlur(index, event.target.value, null)} />\n      <span style={{ fontSize: 24 }}>,</span>\n      <br />\n      <span style={{ color: guessedColor }}>{toLowercaseFirstLetter(question.questionText)}</span>\n      <br />\n      <TextField id={reasonId} placeholder=\"what\" defaultValue={question.answer} onBlur={event => onBlur(index, null, event.target.value)} />\n    </>\n  )\n}\n\nexport default BingoCard;","const shuffleArray = array => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n}\r\n\r\nconst toLowercaseFirstLetter = string => {\r\n    return string.charAt(0).toLowerCase() + string.slice(1);\r\n}\r\n\r\nexport { shuffleArray, toLowercaseFirstLetter };","import React from 'react';\r\n\r\nconst Emoji = props => (\r\n    <span\r\n        style={{ paddingRight: 10, fontSize: '1.2em' }}\r\n        className=\"emoji\"\r\n        role=\"img\"\r\n        aria-label={props.label ? props.label : \"\"}\r\n        aria-hidden={props.label ? \"false\" : \"true\"}\r\n    >\r\n        {props.symbol}\r\n    </span>\r\n);\r\n\r\nexport default Emoji;","import { shuffleArray } from './helpers';\r\n\r\nconst getQuestionsOrder = (questions) => {\r\n    let shuffledQuestions = questions.slice(0);\r\n    shuffleArray(shuffledQuestions);\r\n\r\n    return shuffledQuestions.map(shuffledQuestion => {\r\n        return {\r\n            questionType: shuffledQuestion.questionType,\r\n            questionText: shuffledQuestion.questionText,\r\n            answer: null,\r\n            reason: null,\r\n            isAnswered: shuffledQuestion.questionType === 'free' ? true : false\r\n        }\r\n    });\r\n};\r\n\r\nconst checkForBingo = (questions, index, winType, gridSize) => {\r\n    let row = Math.floor(index / gridSize);\r\n    let column = index % gridSize;\r\n\r\n    let isBingo = true;\r\n    for (let i = 0; i < gridSize && isBingo; i++) {\r\n        let position = winType === 'row'\r\n            ? gridSize * row + i\r\n            : gridSize * i + column;\r\n\r\n        isBingo = questions[position].isAnswered;\r\n    }\r\n\r\n    return isBingo;\r\n}\r\n\r\nconst isBingoQuestionAnswered = (question) => {\r\n    if (question.questionType === 'default' && question.answer) {\r\n        return true;\r\n    }\r\n    if (question.questionType === 'open-ended-question'\r\n        && question.answer && question.reason) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nexport { getQuestionsOrder, checkForBingo, isBingoQuestionAnswered };","import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport BingoCard from './BingoCard';\nimport Emoji from './Emoji';\nimport { checkForBingo, getQuestionsOrder, isBingoQuestionAnswered } from '../logic/bingo-logic';\nimport './BingoGame.css';\n\n// styling\nconst useStyles = makeStyles((theme) => ({\n  layout: {\n    width: 'auto',\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 1200,\n      marginLeft: 'auto',\n      marginRight: 'auto'\n    },\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  sidekickContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(0, 0, 4),\n  },\n  bingoContent: {\n    position: \"fixed\",\n    bottom: theme.spacing(2),\n    left: theme.spacing(1),\n    margin: theme.spacing(2, 0, 2),\n    fontSize: 34\n  },\n  doubleBingoContent: {\n    position: \"fixed\",\n    bottom: theme.spacing(8),\n    left: theme.spacing(1),\n    margin: theme.spacing(2, 0, 2),\n    fontSize: 22\n  },\n  bold: {\n    fontWeight: 'bold'\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3)\n    }\n  },\n  card: {\n    height: 160\n  },\n  container: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    margin: props => -props.spaceBetweenItems * 0.5\n  },\n  item: {\n    display: 'block',\n    flex: 'none',\n    width: props => 100 / props.gridSize + '%',\n    boxSizing: 'border-box',\n    padding: props => props.spaceBetweenItems * 0.5\n  }\n}));\n\nfunction BingoGame({ data, gridSize }) {\n  const classes = useStyles({ gridSize: gridSize, spaceBetweenItems: 20 });\n  const [questions, setQuestions] = useState([]);\n  const [bingoCounter, setBingoCounter] = useState(0);\n  const [isDoubleBingo, setIsDoubleBingo] = useState(false);\n\n  useEffect(() => {\n    // let shuffledQuestions = JSON.parse(localStorage.getItem('shuffledQuestions')) || getQuestionsOrder(data);\n    let shuffledQuestions = getQuestionsOrder(data);\n\n    setQuestions(shuffledQuestions);\n  }, [data]);\n\n  React.useEffect(() => {\n    localStorage.setItem('shuffledQuestions', JSON.stringify(questions))\n  }, [questions]);\n\n  const handleOnBlur = (index, answer, reason) => {\n    const updatedQuestions = questions.slice(0);\n    updatedQuestions[index].answer = answer || updatedQuestions[index].answer;\n    updatedQuestions[index].reason = reason || updatedQuestions[index].reason;\n    updatedQuestions[index].isAnswered = isBingoQuestionAnswered(updatedQuestions[index]);\n    setQuestions(updatedQuestions);\n\n    let isRowBingo = checkForBingo(updatedQuestions, index, 'row', gridSize);\n    let isColumnBingo = checkForBingo(updatedQuestions, index, 'column', gridSize);\n\n    if (isRowBingo && isColumnBingo) {\n      setBingoCounter(bingoCounter + 2);\n      setIsDoubleBingo(true);\n    }\n    else if (isRowBingo || isColumnBingo) {\n      setBingoCounter(bingoCounter + 1);\n    }\n  }\n\n  return (\n    <>\n      <CssBaseline />\n      <main className={classes.layout}>\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography component=\"h1\" variant=\"h2\" align=\"center\" color=\"textPrimary\" gutterBottom>\n              People Bingo!\n            </Typography>\n          </Container>\n        </div>\n        <div className={classes.sidekickContent}>\n          <Container maxWidth=\"md\">\n            <List>\n              <ListItem>\n                <ListItemText disableTypography primary={<Typography style={{ fontWeight: 'bold' }}>Rules:</Typography>} />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"📋\" label=\"clipboard\" />\n                <ListItemText primary=\"Everyone receives the same questions in a random order.\" />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"🤔\" label=\"thinking-face\" />\n                <ListItemText primary=\"One by one, each participant asks the others a question from the game.\" />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"🎉\" label=\"party-popper\" />\n                <ListItemText disableTypography\n                  primary={<Typography>If the person being asked answers, <span style={{ fontWeight: 'bold' }}>everyone</span> in the group writes down their name in the bingo card.</Typography>} />\n              </ListItem>\n              <ListItem>\n                <Emoji symbol=\"💯\" label=\"hundred-points\" />\n                <ListItemText primary=\"The team decides when the game ends. It can be when somebody fills in either a row or a column, both, multiple - go wild!\" />\n              </ListItem>\n            </List>\n          </Container>\n        </div>\n\n        <div className={classes.bingoContent}>\n          <Container maxWidth=\"sm\">\n            {\n              bingoCounter > 0 &&\n              <>\n                <span>Bingo! x</span><span>{bingoCounter}</span>\n              </>\n            }\n          </Container>\n        </div>\n\n        <div className={classes.doubleBingoContent}>\n          <Container maxWidth=\"sm\">\n            {\n              isDoubleBingo && <span>Whoa! Double bingo!</span>\n            }\n          </Container>\n        </div>\n\n        <Paper elevation={3} className={classes.paper}>\n          <div className={classes.container}>\n            {\n              questions.map((question, index) => (\n                <div key={index} className={classes.item}>\n\n                  <Card className={classes.card}>\n                    <CardContent>\n                      <BingoCard\n                        index={index}\n                        question={question}\n                        onBlur={handleOnBlur}\n                      />\n                    </CardContent>\n                  </Card>\n\n                </div>\n              ))\n            }\n          </div>\n        </Paper>\n      </main >\n    </>\n  );\n}\n\nexport default BingoGame;","import './App.css';\nimport { Helmet } from 'react-helmet';\nimport BingoGame from './BingoGame';\nimport data from '../data.json';\n\nconst App = () => {\n  return (\n    <>\n      <Helmet>\n        <title>Bingo bango bongo</title>\n      </Helmet>\n\n      <BingoGame\n        data={data}\n        gridSize={5}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'fontsource-roboto';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}